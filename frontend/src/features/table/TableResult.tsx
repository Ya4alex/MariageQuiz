import type { TableEvent } from "../../data/events";
import { categoryMorphMap, type category } from "../../data/models";
import "./TableResult.css";
import { useState } from "react";

interface TableResultProps {
  tableState: TableEvent;
}

const TableResult = ({ tableState }: TableResultProps) => {
  const { result } = tableState;
  const [openIdxs, setOpenIdxs] = useState<Set<number>>(new Set());

  if (!result) {
    return (
      <div className="table-result-container">
        <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
        <p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.</p>
      </div>
    );
  }

  const place = result.place !== null ? result.place : null;
  const placeEmoji = place === 1 ? "ü•á" : "";

  // –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
  const questions = result.questions || [];
  const answers = result.answers || {};
  const questionScore = result.question_score || {};

  const toggleQuestion = (idx: number) => {
    setOpenIdxs((prev) => {
      const next = new Set(prev);
      if (next.has(idx)) {
        next.delete(idx);
      } else {
        next.add(idx);
      }
      return next;
    });
  };

  return (
    <div className="table-result-container">
      <h2 className="table-result-title">
        {placeEmoji} –ò—Ç–æ–≥–∏ —Å—Ç–æ–ª–∞ ‚Ññ{tableState.table_id}
      </h2>
      <em>{tableState.table_name}</em>
      <div className="table-result-main">
        <div className="table-result-row">
          <span className="table-result-label">–ú–µ—Å—Ç–æ –≤ –æ–±—â–µ–º –∑–∞—á—ë—Ç–µ:</span>
          <span className="table-result-value">
            <b className="table-result-place-number">{place !== null ? `${place}` : "‚Äî"}</b>
            <span className="table-result-place-amount"> –∏–∑ {result.place_amount}</span>
          </span>
        </div>
        <div className="table-result-row">
          <span className="table-result-label">–û–±—â–∏–µ –±–∞–ª–ª—ã:</span>
          <span className="table-result-value table-result-score">
            <b>{+result.score.toFixed(2)}</b>
          </span>
        </div>
      </div>
      <div className="table-result-categories">
        <h3 className="table-result-categories-title">–ú–µ—Å—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</h3>
        <ul className="table-result-categories-list">
          {result.place_categories &&
            Object.entries(result.categories).map(([cat, score]) => {
              const catPlace = result.place_categories?.[cat as category];
              return (
                <li key={cat} className="table-result-category-item">
                  <span className="table-result-category-name">
                    {categoryMorphMap[cat as category].short}
                  </span>
                  <span className="table-result-category-place">
                    {catPlace === 1 ? "ü•á" : ""}
                    {catPlace !== null && catPlace !== undefined ? `${catPlace} –º–µ—Å—Ç–æ` : "‚Äî"}
                  </span>
                  <span className="table-result-category-score">{+score.toFixed(2)} –±–∞–ª–ª–æ–≤</span>
                </li>
              );
            })}
        </ul>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –±–∞–ª–ª—ã */}
      {questions.length > 0 && (
        <div className="table-result-questions">
          <h3 className="table-result-categories-title" style={{ marginTop: 24 }}>–í–æ–ø—Ä–æ—Å—ã</h3>
          <ul className="table-result-questions-list">
            {questions.map((q, idx) => {
              const userAnswers = answers[q.id] || [];
              const isOpen = openIdxs.has(idx);

              // –ò—Å–ø–æ–ª—å–∑—É–µ–º question_score –¥–ª—è –±–∞–ª–ª–æ–≤
              const userScore = questionScore[q.id] ?? 0;
              const maxScore = q.score ?? q.correct_answers.length;

              return (
                <li
                  key={q.id}
                  className={`table-result-question-item${isOpen ? " open" : ""}`}
                  onClick={() => toggleQuestion(idx)}
                >
                  <div className="table-result-question-header">
                    <span className="table-result-question-number">{idx + 1}.</span>
                    <span className="table-result-question-title">{q.question}</span>
                    <span className="table-result-question-score">
                      {userScore} / {maxScore}
                    </span>
                  </div>
                  {isOpen && (
                    <div className="table-result-question-details">
                      <div>
                        <b>–í–∞—à –æ—Ç–≤–µ—Ç:</b>{" "}
                        {userAnswers.length
                          ? userAnswers.map((aIdx: number) => q.answers[aIdx]).join(", ")
                          : <span style={{ color: "#dc3545" }}>–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞</span>}
                      </div>
                      <div>
                        <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π:</b>{" "}
                        {q.correct_answers.map((aIdx: number) => q.answers[aIdx]).join(", ")}
                      </div>
                    </div>
                  )}
                </li>
              );
            })}
          </ul>
        </div>
      )}
    </div>
  );
};

export default TableResult;
